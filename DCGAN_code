import paddle
import paddle.nn as nn
import paddle.vision.datasets as datasets
import paddle.vision.transforms as transforms
import paddle.optimizer as optimizer
import numpy as np
import os
import random
import matplotlib.pyplot as plt
import matplotlib.animation as animation


dataset=datasets.MNIST(mode='train',
                       transform=transforms.Compose([
                           transforms.Resize((32,32)),
                           transforms.Normalize([127.5],[127.5])

                       ])
                       )
dataloader = paddle.io.DataLoader(dataset, batch_size=32,
                                  shuffle=True, num_workers=1)
class Generator(nn.Layer):
    def __init__(self):
        super(Generator, self).__init__()
        self.gen=nn.Sequential(
            nn.Conv2DTranspose(100,64*4,4,1,0,bias_attr=False),
            nn.BatchNorm2D(64*4),
            nn.ReLU(True),
            nn.Conv2DTranspose(64*4,64*2,8,4,2,bias_attr=False),
            nn.BatchNorm2D(64*2),
            nn.ReLU(True),
            nn.Conv2DTranspose(64*2,64,4,2,1,bias_attr=False),
            nn.BatchNorm2D(64),
            nn.ReLU(True),
            nn.Conv2DTranspose(64,1,4,2,1,bias_attr=False),
            nn.Tanh()
        )
        def forward(self,x):
            return  self.gen(x)
netG=Generator()
print(netG)
class Discriminator(nn.Layer):
    def __init__(self):
        super(Discriminator, self).__init__()
        self.dis=nn.Sequential(
            nn.Conv2D(1,64,4,2,1,bias_attr=False),
            nn.LeakyReLU(0.2),
            nn.Conv2D(64,64*2,4,2,1,bias_attr=False),
            nn.BatchNorm2D(64*2),
            nn.LeakyReLU(0.2),
            nn.Conv2D(64*2,64*4,4,2,1,bias_attr=False),
            nn.BatchNorm2D(64*4),
            nn.LeakyReLU(0.2),
            nn.Conv2D(64*4,1,4,1,0,bias_attr=False),
            nn.Sigmoid()
        )
        def forward(self,x):
            return self.dis(x)
netD=Discriminator()
print(netD)










